"use strict";(self.webpackChunksc_land=self.webpackChunksc_land||[]).push([[30028],{42388:(e,t,r)=>{r.d(t,{j:()=>l});var s=r(27366),a=r(7138),i=r(49861),n=(r(93169),r(32718),r(84936),r(69912));const o={visible:"visibleSublayers"};let l=class extends a.Z{constructor(e){super(e),this.scale=0}set layer(e){this._get("layer")!==e&&(this._set("layer",e),this.removeHandles("layer"),e&&this.addHandles([e.sublayers.on("change",(()=>this.notifyChange("visibleSublayers"))),e.on("wms-sublayer-update",(e=>this.notifyChange(o[e.propertyName])))],"layer"))}get layers(){return this.visibleSublayers.filter((e=>{let{name:t}=e;return t})).map((e=>{let{name:t}=e;return t})).join()}get version(){this.commitProperty("layers");const e=this.layer;return e&&e.commitProperty("imageTransparency"),(this._get("version")||0)+1}get visibleSublayers(){const{layer:e,scale:t}=this,r=null===e||void 0===e?void 0:e.sublayers,s=[],a=e=>{const{minScale:r,maxScale:i,sublayers:n,visible:o}=e;o&&(0===t||(0===r||t<=r)&&(0===i||t>=i))&&(n?n.forEach(a):s.push(e))};return null!==r&&void 0!==r&&r.forEach(a),s}toJSON(){const{layer:e,layers:t}=this,{imageFormat:r,imageTransparency:s,version:a}=e;return{format:r,request:"GetMap",service:"WMS",styles:"",transparent:s?"TRUE":"FALSE",version:a,layers:t}}};(0,s._)([(0,i.Cb)()],l.prototype,"layer",null),(0,s._)([(0,i.Cb)({readOnly:!0})],l.prototype,"layers",null),(0,s._)([(0,i.Cb)({type:Number})],l.prototype,"scale",void 0),(0,s._)([(0,i.Cb)({readOnly:!0})],l.prototype,"version",null),(0,s._)([(0,i.Cb)({readOnly:!0})],l.prototype,"visibleSublayers",null),l=(0,s._)([(0,n.j)("esri.layers.support.ExportWMSImageParameters")],l)},30028:(e,t,r)=>{r.r(t),r.d(t,{default:()=>d});var s=r(27366),a=r(10064),i=(r(32718),r(93169),r(84936),r(69912)),n=r(53866),o=r(69229),l=r(92026),p=r(66978),h=r(49861),u=r(45948),y=r(42388);const c=e=>{let t=class extends e{initialize(){this.exportImageParameters=new y.j({layer:this.layer})}destroy(){this.exportImageParameters=(0,l.SC)(this.exportImageParameters)}get exportImageVersion(){var e;return null!==(e=this.exportImageParameters)&&void 0!==e&&e.commitProperty("version"),this.commitProperty("timeExtent"),(this._get("exportImageVersion")||0)+1}async fetchPopupFeaturesAtLocation(e,t){const{layer:r}=this;if(!e)throw new a.Z("wmslayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:r});const{popupEnabled:s}=r;if(!s)throw new a.Z("wmslayerview:fetchPopupFeatures","popupEnabled should be true",{popupEnabled:s});const i=this.createFetchPopupFeaturesQuery(e);if(!i)return[];const{extent:n,width:o,height:l,x:h,y:u}=i;if(!(n&&o&&l))throw new a.Z("wmslayerview:fetchPopupFeatures","WMSLayer does not support fetching features.",{extent:n,width:o,height:l});const y=await r.fetchFeatureInfo(n,o,l,h,u);return(0,p.k_)(t),y}};return(0,s._)([(0,h.Cb)()],t.prototype,"exportImageParameters",void 0),(0,s._)([(0,h.Cb)({readOnly:!0})],t.prototype,"exportImageVersion",null),(0,s._)([(0,h.Cb)()],t.prototype,"layer",void 0),(0,s._)([(0,h.Cb)(u.qG)],t.prototype,"timeExtent",void 0),t=(0,s._)([(0,i.j)("esri.layers.mixins.WMSLayerView")],t),t};let m=class extends(c(o.Z)){constructor(){super(...arguments),this.type="wms-3d"}initialize(){this.layer.serviceSupportsSpatialReference(this.view.spatialReference)||this.addResolvingPromise(Promise.reject(new a.Z("layerview:spatial-reference-incompatible","The spatial references supported by this WMS layer are incompatible with the spatial reference of the view"))),this._updatingHandles.add((()=>{var e;return null===(e=this.exportImageParameters)||void 0===e?void 0:e.version}),(()=>{this._updatingHandles.addPromise(this.refreshDebounced())}))}createFetchPopupFeaturesQuery(e){const t=this.findExtentInfoAt(e),r=t.extent,s=new n.Z(r[0],r[1],r[2],r[3],this._spatialReference),a=t.imageSize,i=a.width,o=a.height,l=s.width/i;return{extent:s,width:i,height:o,x:Math.round((e.x-s.xmin)/l),y:Math.round((s.ymax-e.y)/l)}}getFetchOptions(){return{timeExtent:this.timeExtent}}};m=(0,s._)([(0,i.j)("esri.views.3d.layers.WMSLayerView3D")],m);const d=m}}]);
//# sourceMappingURL=30028.3c22dca1.chunk.js.map